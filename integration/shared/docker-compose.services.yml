# Shared services for tail sampling integration tests
# This file contains reusable service definitions

services:
  # Redis for distributed coordination
  redis:
    image: redis:8.2.1-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # MinIO for S3-compatible object storage
  minio:
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO client to create test buckets
  minio-setup:
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set minio http://minio:9000 minioadmin minioadmin123;
      mc mb minio/tail-sampling-test --ignore-existing;
      mc policy set public minio/tail-sampling-test;
      echo 'MinIO setup complete';
      "

  # Fake GCS server for Google Cloud Storage testing
  fake-gcs:
    image: fsouza/fake-gcs-server:latest
    ports:
      - "4443:4443"
    command: -scheme http -host 0.0.0.0 -port 4443
    volumes:
      - gcs_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4443/storage/v1/"]
      interval: 10s
      timeout: 5s
      retries: 5

  # GCS setup to create test bucket
  gcs-setup:
    image: google/cloud-sdk:alpine
    depends_on:
      fake-gcs:
        condition: service_healthy
    environment:
      CLOUDSDK_CORE_PROJECT: test-project
      CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE: /dev/null
      CLOUDSDK_CORE_DISABLE_PROMPTS: 1
    entrypoint: >
      /bin/sh -c "
      export GOOGLE_CLOUD_PROJECT=test-project;
      gcloud config set storage/json_api_version v1;
      gcloud config set auth/disable_credentials true;
      gcloud config set storage/gcs_json_api_version v1;
      gsutil -o 'Credentials:gs_json_host=fake-gcs' -o 'Credentials:gs_json_port=4443' mb gs://tail-sampling-test || true;
      echo 'GCS setup complete';
      "

  # OpenTelemetry Collector with tail sampling processor
  otel-collector:
    image: otelcontribcol:latest
    ports:
      - "4317:4317"  # OTLP gRPC
      - "4318:4318"  # OTLP HTTP
      - "8888:8888"  # Prometheus metrics
      - "8889:8889"  # Prometheus metrics (alternate)
    volumes:
      - ./config:/config:ro
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - OTEL_LOG_LEVEL=debug
    command: ["--config=/config/otelcol-config.yaml"]

  # Trace generator for testing
  trace-generator:
    image: telemetrygen:latest
    depends_on:
      - otel-collector
    command: [
      "traces",
      "--otlp-endpoint", "otel-collector:4317",
      "--otlp-insecure",
      "--duration", "300s",
      "--rate", "10",
      "--traces", "1000",
      "--child-spans", "5",
      "--service", "test-service"
    ]

volumes:
  redis_data:
  minio_data:
  gcs_data:

networks:
  default:
    name: tail-sampling-test