# OpenTelemetry Collector configuration for Object Storage Only testing
# This configuration uses in-memory storage with object spillover (no Redis)

receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

processors:
  # Aggressive memory limiter to force spillover quickly
  memory_limiter:
    limit_mib: 64
    spike_limit_mib: 16
    check_interval: 1s

  # Tail sampling with in-memory + object storage
  tailsamplingprocessor:
    # Trace buffer configuration (smaller for testing)
    decision_wait: 5s
    num_traces: 100  # Small buffer to force spillover
    expected_new_traces_per_sec: 50
    
    # Storage configuration - In-memory with S3 spillover
    storage:
      inmemory:
        spill:
          enabled: true
          backend: s3
          bucket: tail-sampling-test
          prefix: "object-only-test"
          segment_bytes: 1048576  # 1MB (smaller segments)
          codec: jsonl.zst
          s3_endpoint: "http://minio:9000"
          s3_force_path_style: true
          s3_region: "us-east-1"
    
    # Simple sampling policies for basic testing
    policies:
      - name: always_sample_errors
        type: status_code
        status_code:
          status_codes: [ERROR]
      
      - name: probabilistic_sample
        type: probabilistic
        probabilistic:
          sampling_percentage: 10.0  # Higher percentage for testing

exporters:
  # Debug exporter to verify sampling decisions
  debug:
    verbosity: detailed
  
  # File exporter to save sampled traces
  file:
    path: "/tmp/sampled-traces.json"

  # Prometheus metrics for monitoring
  prometheus:
    endpoint: "0.0.0.0:8888"

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [memory_limiter, tailsamplingprocessor]
      exporters: [debug, file]
    
    metrics:
      receivers: []
      processors: []
      exporters: [prometheus]

  extensions: []
  
  telemetry:
    logs:
      level: debug
    metrics:
      address: 0.0.0.0:8889